package koulutusRekisteri.test;
// Generated by ComTest BEGIN
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import koulutusRekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.05.05 17:47:47 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class KoulutusrekisteriTest {


  // Generated by ComTest BEGIN
  /** 
   * testLisaa81 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa81() throws SailoException {    // Koulutusrekisteri: 81
    Koulutusrekisteri koulutusrekisteri = new Koulutusrekisteri(); 
    Tyontekija aku1 = new Tyontekija(), aku2 = new Tyontekija(); 
    koulutusrekisteri.lisaa(aku1); 
    koulutusrekisteri.lisaa(aku2); 
    koulutusrekisteri.lisaa(aku1); 
    Collection<Tyontekija> loytyneet = koulutusrekisteri.etsiTyontekija("", -1); 
    Iterator<Tyontekija> it = loytyneet.iterator(); 
    assertEquals("From: Koulutusrekisteri line: 90", aku1, it.next()); 
    assertEquals("From: Koulutusrekisteri line: 91", aku2, it.next()); 
    assertEquals("From: Koulutusrekisteri line: 92", aku1, it.next()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaRelaatiot173 
   * @throws IndexOutOfBoundsException when error
   */
  @Test
  public void testAnnaRelaatiot173() throws IndexOutOfBoundsException {    // Koulutusrekisteri: 173
    Koulutusrekisteri koulutusrekisteri = new Koulutusrekisteri(); 
    Tyontekija aku1 = new Tyontekija(); aku1.vastaaAkuAnkka(); aku1.rekisteroi(); 
    Tyontekija aku2 = new Tyontekija(); aku2.vastaaAkuAnkka(); aku2.rekisteroi(); 
    Tyontekija aku3 = new Tyontekija(); aku3.vastaaAkuAnkka(); aku3.rekisteroi(); 
    Koulutus vesi1 = new Koulutus(); vesi1.vastaaVesisukeltaja(); vesi1.rekisteroi(); 
    Koulutus vesi2 = new Koulutus(); vesi2.vastaaVesisukeltaja(); vesi2.rekisteroi(); 
    int id1 = aku1.getTyontekijaTunnus(); 
    int id2 = aku2.getTyontekijaTunnus(); 
    int id3 = vesi1.getKoulutusTunnus(); 
    int id4 = vesi2.getKoulutusTunnus(); 
    Relaatio rel1 = new Relaatio(id1, id3); rel1.vastaaRelaatio(); rel1.rekisteroi(); 
    Relaatio rel2 = new Relaatio(id2, id4); rel2.vastaaRelaatio(); rel2.rekisteroi(); 
    try {
    koulutusrekisteri.lisaa(aku1); 
    fail("Koulutusrekisteri: 195 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    koulutusrekisteri.lisaa(aku2); 
    fail("Koulutusrekisteri: 196 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    koulutusrekisteri.lisaa(vesi1); 
    fail("Koulutusrekisteri: 197 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    koulutusrekisteri.lisaa(vesi2); 
    fail("Koulutusrekisteri: 198 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    koulutusrekisteri.lisaa(rel1); 
    fail("Koulutusrekisteri: 199 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    koulutusrekisteri.lisaa(rel2); 
    fail("Koulutusrekisteri: 200 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    List<Relaatio> loytyneet; 
    loytyneet = koulutusrekisteri.annaRelaatiot(1); 
    assertEquals("From: Koulutusrekisteri line: 204", 1, loytyneet.size()); 
    loytyneet = koulutusrekisteri.annaRelaatiot(2); 
    assertEquals("From: Koulutusrekisteri line: 206", 2, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta236 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta236() throws SailoException {    // Koulutusrekisteri: 236
    Koulutusrekisteri koulutusrekisteri = new Koulutusrekisteri(); 
    Tyontekija aku1 = new Tyontekija(); aku1.vastaaAkuAnkka(); aku1.rekisteroi(); 
    Tyontekija aku2 = new Tyontekija(); aku2.vastaaAkuAnkka(); aku2.rekisteroi(); 
    Koulutus vesi1 = new Koulutus(); vesi1.vastaaVesisukeltaja(); vesi1.rekisteroi(); 
    Koulutus vesi2 = new Koulutus(); vesi2.vastaaVesisukeltaja(); vesi2.rekisteroi(); 
    int id1 = aku1.getTyontekijaTunnus(); 
    int id2 = aku2.getTyontekijaTunnus(); 
    int id3 = vesi1.getKoulutusTunnus(); 
    int id4 = vesi2.getKoulutusTunnus(); 
    Relaatio rel1 = new Relaatio(id1, id3); rel1.vastaaRelaatio(); rel1.rekisteroi(); 
    Relaatio rel2 = new Relaatio(id2, id4); rel2.vastaaRelaatio(); rel2.rekisteroi(); 
    String hakemisto = "testit"; 
    File dir = new File(hakemisto); 
    File ftied = new File(hakemisto+"/tyontekijat.dat"); 
    File fktied = new File(hakemisto+"/koulutukset.dat"); 
    File frtied = new File(hakemisto+"/relaatiot.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    fktied.delete(); 
    frtied.delete(); 
    try {
    koulutusrekisteri.lueTiedostosta(hakemisto); 
    fail("Koulutusrekisteri: 266 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    koulutusrekisteri.lisaa(aku1); 
    koulutusrekisteri.lisaa(aku2); 
    koulutusrekisteri.lisaa(vesi1); 
    koulutusrekisteri.lisaa(vesi2); 
    koulutusrekisteri.lisaa(rel1); 
    koulutusrekisteri.lisaa(rel2); 
    koulutusrekisteri.tallenna(); 
    koulutusrekisteri = new Koulutusrekisteri(); 
    koulutusrekisteri.lueTiedostosta(hakemisto); 
    Collection<Tyontekija> kaikki = koulutusrekisteri.etsiTyontekija("", -1); 
    Iterator<Tyontekija> it = kaikki.iterator(); 
    assertEquals("From: Koulutusrekisteri line: 281", aku1, it.next()); 
    assertEquals("From: Koulutusrekisteri line: 282", aku2, it.next()); 
    assertEquals("From: Koulutusrekisteri line: 283", false, it.hasNext()); 
    Collection<Koulutus> koulutus = koulutusrekisteri.etsiKoulutus("", -1); 
    Iterator<Koulutus> ik = koulutus.iterator(); 
    assertEquals("From: Koulutusrekisteri line: 287", vesi1, ik.next()); 
    assertEquals("From: Koulutusrekisteri line: 288", vesi2, ik.next()); 
    assertEquals("From: Koulutusrekisteri line: 289", false, ik.hasNext()); 
    List<Relaatio> loytyneet = koulutusrekisteri.annaRelaatiot(0); 
    Iterator<Relaatio> ir = loytyneet.iterator(); 
    assertEquals("From: Koulutusrekisteri line: 293", rel1, ir.next()); 
    assertEquals("From: Koulutusrekisteri line: 294", rel2, ir.next()); 
    assertEquals("From: Koulutusrekisteri line: 295", false, ir.hasNext()); 
    loytyneet = koulutusrekisteri.annaRelaatiot(1); 
    ir = loytyneet.iterator(); 
    assertEquals("From: Koulutusrekisteri line: 298", rel1, ir.next()); 
    assertEquals("From: Koulutusrekisteri line: 299", rel2, ir.next()); 
    assertEquals("From: Koulutusrekisteri line: 300", false, ir.hasNext()); 
    koulutusrekisteri.lisaa(aku1); 
    koulutusrekisteri.lisaa(vesi1); 
    koulutusrekisteri.lisaa(rel1); 
    koulutusrekisteri.tallenna(); 
    assertEquals("From: Koulutusrekisteri line: 305", true, ftied.delete()); 
    assertEquals("From: Koulutusrekisteri line: 306", true, fktied.delete()); 
    assertEquals("From: Koulutusrekisteri line: 307", true, frtied.delete()); 
    assertEquals("From: Koulutusrekisteri line: 308", true, dir.delete()); 
  } // Generated by ComTest END
}