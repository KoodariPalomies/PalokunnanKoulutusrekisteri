package koulutusRekisteri.test;
// Generated by ComTest BEGIN
import koulutusRekisteri.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.05.26 20:00:29 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class RelaatiotTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa56 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa56() throws SailoException,CloneNotSupportedException {    // Relaatiot: 56
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio aku1 = new Relaatio(), aku2 = new Relaatio(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    assertEquals("From: Relaatiot line: 62", 0, relaatiot.getLkm()); 
    relaatiot.korvaaTaiLisaa(aku1); assertEquals("From: Relaatiot line: 63", 1, relaatiot.getLkm()); 
    relaatiot.korvaaTaiLisaa(aku2); assertEquals("From: Relaatiot line: 64", 2, relaatiot.getLkm()); 
    Relaatio aku3 = aku1.clone(); 
    Iterator<Relaatio> it = relaatiot.iterator(); 
    assertEquals("From: Relaatiot line: 67", true, it.next() == aku1); 
    relaatiot.korvaaTaiLisaa(aku3); assertEquals("From: Relaatiot line: 68", 2, relaatiot.getLkm()); 
    it = relaatiot.iterator(); 
    Relaatio j0 = it.next(); 
    assertEquals("From: Relaatiot line: 71", aku3, j0); 
    assertEquals("From: Relaatiot line: 72", true, j0 == aku3); 
    assertEquals("From: Relaatiot line: 73", false, j0 == aku1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiRelaatio95 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiRelaatio95() throws SailoException {    // Relaatiot: 95
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio vesi1 = new Relaatio(); vesi1.parse("1|Vesisukeltaja"); 
    Relaatio vesi2 = new Relaatio(); vesi2.parse("1|Vesisukeltaja"); 
    Relaatio vesi3 = new Relaatio(); vesi3.parse("1|Vesisukeltaja"); 
    relaatiot.lisaa(vesi1); relaatiot.lisaa(vesi2); relaatiot.lisaa(vesi3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista118 
   * @throws SailoException when error
   */
  @Test
  public void testPoista118() throws SailoException {    // Relaatiot: 118
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(), rel3 = new Relaatio(); 
    rel1.rekisteroi(); rel2.rekisteroi(); rel3.rekisteroi(); 
    int id1 = rel1.getRelaatioTunnus(); 
    relaatiot.lisaa(rel1); relaatiot.lisaa(rel2); relaatiot.lisaa(rel3); 
    assertEquals("From: Relaatiot line: 125", 1, relaatiot.poista(id1+1)); 
    assertEquals("From: Relaatiot line: 126", null, relaatiot.annaRelaatiot(id1+1)); assertEquals("From: Relaatiot line: 126", 2, relaatiot.getLkm()); 
    assertEquals("From: Relaatiot line: 127", 1, relaatiot.poista(id1)); assertEquals("From: Relaatiot line: 127", 1, relaatiot.getLkm()); 
    assertEquals("From: Relaatiot line: 128", 0, relaatiot.poista(id1+3)); assertEquals("From: Relaatiot line: 128", 1, relaatiot.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId151 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId151() throws SailoException {    // Relaatiot: 151
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(), rel3 = new Relaatio(); 
    rel1.rekisteroi(); rel2.rekisteroi(); rel3.rekisteroi(); 
    int id1 = rel1.getRelaatioTunnus(); 
    relaatiot.lisaa(rel1); relaatiot.lisaa(rel2); relaatiot.lisaa(rel3); 
    assertEquals("From: Relaatiot line: 158", 1, relaatiot.etsiId(id1+1)); 
    assertEquals("From: Relaatiot line: 159", 2, relaatiot.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa175 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa175() throws SailoException {    // Relaatiot: 175
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(); 
    assertEquals("From: Relaatiot line: 180", 0, relaatiot.getLkm()); 
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 181", 1, relaatiot.getLkm()); 
    relaatiot.lisaa(rel2); assertEquals("From: Relaatiot line: 182", 2, relaatiot.getLkm()); 
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 183", 3, relaatiot.getLkm()); 
    assertEquals("From: Relaatiot line: 184", rel1, relaatiot.annaRelaatiot(0)); 
    assertEquals("From: Relaatiot line: 185", rel2, relaatiot.annaRelaatiot(1)); 
    assertEquals("From: Relaatiot line: 186", rel1, relaatiot.annaRelaatiot(2)); 
    assertEquals("From: Relaatiot line: 187", false, relaatiot.annaRelaatiot(1) == rel1); 
    assertEquals("From: Relaatiot line: 188", true, relaatiot.annaRelaatiot(1) == rel2); 
    try {
    assertEquals("From: Relaatiot line: 189", rel1, relaatiot.annaRelaatiot(3)); 
    fail("Relaatiot: 189 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 190", 4, relaatiot.getLkm()); 
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 191", 5, relaatiot.getLkm()); 
    try {
    relaatiot.lisaa(rel1); 
    fail("Relaatiot: 192 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta228 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta228() throws SailoException {    // Relaatiot: 228
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(); 
    rel1.vastaaRelaatio(); 
    rel2.vastaaRelaatio(); 
    String hakemisto = "testirelaatiot"; 
    String tiedNimi = hakemisto+"/relaatiot"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    relaatiot.lueTiedostosta(tiedNimi); 
    fail("Relaatiot: 243 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    relaatiot.lisaa(rel1); 
    relaatiot.lisaa(rel2); 
    relaatiot.tallenna(); 
    relaatiot = new Relaatiot(); 
    relaatiot.lueTiedostosta(tiedNimi); 
    Iterator<Relaatio> i = relaatiot.iterator(); 
    assertEquals("From: Relaatiot line: 251", rel1, i.next()); 
    assertEquals("From: Relaatiot line: 252", rel2, i.next()); 
    assertEquals("From: Relaatiot line: 253", false, i.hasNext()); 
    relaatiot.lisaa(rel2); 
    relaatiot.tallenna(); 
    assertEquals("From: Relaatiot line: 256", true, ftied.delete()); 
    assertEquals("From: Relaatiot line: 257", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testRelaatiotIterator380 
   * @throws SailoException when error
   */
  @Test
  public void testRelaatiotIterator380() throws SailoException {    // Relaatiot: 380
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(); 
    rel1.rekisteroi(); rel2.rekisteroi(); 
    relaatiot.lisaa(rel1); 
    relaatiot.lisaa(rel2); 
    relaatiot.lisaa(rel1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Relaatio relaatio:relaatiot)
    ids.append(" "+relaatio.getRelaatioTunnus()); 
    String tulos = " " + rel1.getRelaatioTunnus() + " " + rel2.getRelaatioTunnus() + " " + rel1.getRelaatioTunnus(); 
    assertEquals("From: Relaatiot line: 399", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Relaatio> i=relaatiot.iterator(); i.hasNext(); ) {
    Relaatio relaatio = i.next(); 
    ids.append(" "+relaatio.getRelaatioTunnus()); 
    }
    assertEquals("From: Relaatiot line: 407", tulos, ids.toString()); 
    Iterator<Relaatio> i=relaatiot.iterator(); 
    assertEquals("From: Relaatiot line: 410", true, i.next() == rel1); 
    assertEquals("From: Relaatiot line: 411", true, i.next() == rel2); 
    assertEquals("From: Relaatiot line: 412", true, i.next() == rel1); 
    try {
    i.next(); 
    fail("Relaatiot: 414 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator476 */
  @Test
  public void testIterator476() {    // Relaatiot: 476
    Relaatiot relaatiot = new Relaatiot(); 
    try {
    Relaatio rel1 = new Relaatio(); rel1.rekisteroi(); relaatiot.lisaa(rel1); 
    fail("Relaatiot: 482 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    Relaatio rel2 = new Relaatio(); rel2.rekisteroi(); relaatiot.lisaa(rel2); 
    fail("Relaatiot: 483 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    Relaatio rel3 = new Relaatio(); rel3.rekisteroi(); relaatiot.lisaa(rel3); 
    fail("Relaatiot: 484 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 1,2,3} ; 
    for (Relaatio rel:relaatiot) {
    assertEquals("From: Relaatiot line: 490", jnrot[n], rel.getTyontekijaTunnus()); n++; 
    }
    assertEquals("From: Relaatiot line: 493", 3, n); 
  } // Generated by ComTest END
}