package koulutusRekisteri.test;
// Generated by ComTest BEGIN
import java.io.File;
import koulutusRekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.05.06 07:33:37 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class RelaatiotTest {


  // Generated by ComTest BEGIN
  /** 
   * testLisaa62 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa62() throws SailoException {    // Relaatiot: 62
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(); 
    assertEquals("From: Relaatiot line: 67", 0, relaatiot.getLkm()); 
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 68", 1, relaatiot.getLkm()); 
    relaatiot.lisaa(rel2); assertEquals("From: Relaatiot line: 69", 2, relaatiot.getLkm()); 
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 70", 3, relaatiot.getLkm()); 
    assertEquals("From: Relaatiot line: 71", rel1, relaatiot.annaRelaatiot(0)); 
    assertEquals("From: Relaatiot line: 72", rel2, relaatiot.annaRelaatiot(1)); 
    assertEquals("From: Relaatiot line: 73", rel1, relaatiot.annaRelaatiot(2)); 
    assertEquals("From: Relaatiot line: 74", false, relaatiot.annaRelaatiot(1) == rel1); 
    assertEquals("From: Relaatiot line: 75", true, relaatiot.annaRelaatiot(1) == rel2); 
    try {
    assertEquals("From: Relaatiot line: 76", rel1, relaatiot.annaRelaatiot(3)); 
    fail("Relaatiot: 76 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 77", 4, relaatiot.getLkm()); 
    relaatiot.lisaa(rel1); assertEquals("From: Relaatiot line: 78", 5, relaatiot.getLkm()); 
    try {
    relaatiot.lisaa(rel1); 
    fail("Relaatiot: 79 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta117 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta117() throws SailoException {    // Relaatiot: 117
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(); 
    rel1.vastaaRelaatio(); 
    rel2.vastaaRelaatio(); 
    String hakemisto = "testirelaatiot"; 
    String tiedNimi = hakemisto+"/relaatiot"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    relaatiot.lueTiedostosta(tiedNimi); 
    fail("Relaatiot: 132 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    relaatiot.lisaa(rel1); 
    relaatiot.lisaa(rel2); 
    relaatiot.tallenna(); 
    relaatiot = new Relaatiot(); 
    relaatiot.lueTiedostosta(tiedNimi); 
    Iterator<Relaatio> i = relaatiot.iterator(); 
    assertEquals("From: Relaatiot line: 140", rel1, i.next()); 
    assertEquals("From: Relaatiot line: 141", rel2, i.next()); 
    assertEquals("From: Relaatiot line: 142", false, i.hasNext()); 
    relaatiot.lisaa(rel2); 
    relaatiot.tallenna(); 
    assertEquals("From: Relaatiot line: 145", true, ftied.delete()); 
    assertEquals("From: Relaatiot line: 146", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testRelaatiotIterator263 
   * @throws SailoException when error
   */
  @Test
  public void testRelaatiotIterator263() throws SailoException {    // Relaatiot: 263
    Relaatiot relaatiot = new Relaatiot(); 
    Relaatio rel1 = new Relaatio(), rel2 = new Relaatio(); 
    rel1.rekisteroi(); rel2.rekisteroi(); 
    relaatiot.lisaa(rel1); 
    relaatiot.lisaa(rel2); 
    relaatiot.lisaa(rel1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Relaatio relaatio:relaatiot)
    ids.append(" "+relaatio.getRelaatioTunnus()); 
    String tulos = " " + rel1.getRelaatioTunnus() + " " + rel2.getRelaatioTunnus() + " " + rel1.getRelaatioTunnus(); 
    assertEquals("From: Relaatiot line: 282", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Relaatio> i=relaatiot.iterator(); i.hasNext(); ) {
    Relaatio relaatio = i.next(); 
    ids.append(" "+relaatio.getRelaatioTunnus()); 
    }
    assertEquals("From: Relaatiot line: 290", tulos, ids.toString()); 
    Iterator<Relaatio> i=relaatiot.iterator(); 
    assertEquals("From: Relaatiot line: 293", true, i.next() == rel1); 
    assertEquals("From: Relaatiot line: 294", true, i.next() == rel2); 
    assertEquals("From: Relaatiot line: 295", true, i.next() == rel1); 
    try {
    i.next(); 
    fail("Relaatiot: 297 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator354 */
  @Test
  public void testIterator354() {    // Relaatiot: 354
    Relaatiot relaatiot = new Relaatiot(); 
    try {
    Relaatio rel1 = new Relaatio(); rel1.rekisteroi(); relaatiot.lisaa(rel1); 
    fail("Relaatiot: 360 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    Relaatio rel2 = new Relaatio(); rel2.rekisteroi(); relaatiot.lisaa(rel2); 
    fail("Relaatiot: 361 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    try {
    Relaatio rel3 = new Relaatio(); rel3.rekisteroi(); relaatiot.lisaa(rel3); 
    fail("Relaatiot: 362 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 1,2,3} ; 
    for (Relaatio rel:relaatiot) {
    assertEquals("From: Relaatiot line: 368", jnrot[n], rel.getTyontekijaTunnus()); n++; 
    }
    assertEquals("From: Relaatiot line: 371", 3, n); 
  } // Generated by ComTest END
}