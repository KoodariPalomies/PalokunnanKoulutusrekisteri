package koulutusRekisteri.test;
// Generated by ComTest BEGIN
import java.io.File;
import koulutusRekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.05.06 07:12:56 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class KoulutuksetTest {


  // Generated by ComTest BEGIN
  /** 
   * testLisaa59 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa59() throws SailoException {    // Koulutukset: 59
    Koulutukset koulutukset = new Koulutukset(); 
    Koulutus vesi1 = new Koulutus(), vesi2 = new Koulutus(); 
    assertEquals("From: Koulutukset line: 63", 0, koulutukset.getLkm()); 
    koulutukset.lisaa(vesi1); assertEquals("From: Koulutukset line: 64", 1, koulutukset.getLkm()); 
    koulutukset.lisaa(vesi2); assertEquals("From: Koulutukset line: 65", 2, koulutukset.getLkm()); 
    koulutukset.lisaa(vesi1); assertEquals("From: Koulutukset line: 66", 3, koulutukset.getLkm()); 
    assertEquals("From: Koulutukset line: 67", vesi1, koulutukset.annaKoulutus(0)); 
    assertEquals("From: Koulutukset line: 68", vesi2, koulutukset.annaKoulutus(1)); 
    assertEquals("From: Koulutukset line: 69", vesi1, koulutukset.annaKoulutus(2)); 
    assertEquals("From: Koulutukset line: 70", false, koulutukset.annaKoulutus(1) == vesi1); 
    assertEquals("From: Koulutukset line: 71", true, koulutukset.annaKoulutus(1) == vesi2); 
    try {
    assertEquals("From: Koulutukset line: 72", vesi1, koulutukset.annaKoulutus(3)); 
    fail("Koulutukset: 72 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    koulutukset.lisaa(vesi1); assertEquals("From: Koulutukset line: 73", 4, koulutukset.getLkm()); 
    koulutukset.lisaa(vesi1); assertEquals("From: Koulutukset line: 74", 5, koulutukset.getLkm()); 
    try {
    koulutukset.lisaa(vesi1); 
    fail("Koulutukset: 75 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta107 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta107() throws SailoException {    // Koulutukset: 107
    Koulutukset koulutukset = new Koulutukset(); 
    Koulutus vesi1 = new Koulutus(); vesi1.vastaaVesisukeltaja(); 
    Koulutus vesi2 = new Koulutus(); vesi2.vastaaVesisukeltaja(); 
    Koulutus vesi3 = new Koulutus(); vesi3.vastaaVesisukeltaja(); 
    String tiedNimi = "testikoulutukset"; 
    File ftied = new File (tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    koulutukset.lueTiedostosta(tiedNimi); 
    fail("Koulutukset: 117 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    koulutukset.lisaa(vesi1); 
    koulutukset.lisaa(vesi2); 
    koulutukset.lisaa(vesi3); 
    koulutukset.tallenna(); 
    koulutukset = new Koulutukset(); 
    koulutukset.lueTiedostosta(tiedNimi); 
    Iterator<Koulutus> i = koulutukset.iterator(); 
    assertEquals("From: Koulutukset line: 125", vesi1.toString(), i.next().toString()); 
    assertEquals("From: Koulutukset line: 126", vesi2.toString(), i.next().toString()); 
    assertEquals("From: Koulutukset line: 127", vesi3.toString(), i.next().toString()); 
    assertEquals("From: Koulutukset line: 128", false, i.hasNext()); 
    koulutukset.lisaa(vesi3); 
    koulutukset.tallenna(); 
    assertEquals("From: Koulutukset line: 131", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKoulutuksetIterator239 
   * @throws SailoException when error
   */
  @Test
  public void testKoulutuksetIterator239() throws SailoException {    // Koulutukset: 239
    Koulutukset koulutukset = new Koulutukset(); 
    Koulutus vesi1 = new Koulutus(), vesi2 = new Koulutus(); 
    vesi1.rekisteroi(); vesi2.rekisteroi(); 
    koulutukset.lisaa(vesi1); 
    koulutukset.lisaa(vesi2); 
    koulutukset.lisaa(vesi1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Koulutus koulutus:koulutukset)
    ids.append(" "+koulutus.getKoulutusTunnus()); 
    String tulos = " " + vesi1.getKoulutusTunnus() + " " + vesi2.getKoulutusTunnus() + " " + vesi1.getKoulutusTunnus(); 
    assertEquals("From: Koulutukset line: 258", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Koulutus> i=koulutukset.iterator(); i.hasNext(); ) {
    Koulutus koulutus = i.next(); 
    ids.append(" "+koulutus.getKoulutusTunnus()); 
    }
    assertEquals("From: Koulutukset line: 266", tulos, ids.toString()); 
    Iterator<Koulutus> i=koulutukset.iterator(); 
    assertEquals("From: Koulutukset line: 269", true, i.next() == vesi1); 
    assertEquals("From: Koulutukset line: 270", true, i.next() == vesi2); 
    assertEquals("From: Koulutukset line: 271", true, i.next() == vesi1); 
    try {
    i.next(); 
    fail("Koulutukset: 273 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiKoulutus332 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiKoulutus332() throws SailoException {    // Koulutukset: 332
    Koulutukset koulutukset = new Koulutukset(); 
    Koulutus vesi1 = new Koulutus(); vesi1.parse("1|Vesisukeltaja"); 
    Koulutus vesi2 = new Koulutus(); vesi2.parse("1|Vesisukeltaja"); 
    Koulutus vesi3 = new Koulutus(); vesi3.parse("1|Vesisukeltaja"); 
    koulutukset.lisaa(vesi1); koulutukset.lisaa(vesi2); koulutukset.lisaa(vesi3); 
  } // Generated by ComTest END
}